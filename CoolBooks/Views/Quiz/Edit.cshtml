@model EditQuizViewModel

@{
    ViewData["Title"] = "Edit";
    var routeUrl = Url.RouteUrl(ViewContext.RouteData.Values);
}

<h1>Edit</h1>

<h4>Quiz</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="QuizId" />
            <div class="form-group">
                <label asp-for="QuizName" class="control-label"></label>
                <input asp-for="QuizName" class="form-control" />
                <span asp-validation-for="QuizName" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsDeleted" /> @Html.DisplayNameFor(model => model.IsDeleted)
                </label>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
                <a class="btn btn-primary" asp-action="AddQuestion" asp-controller="Quiz" asp-route-QuizId="@Model.QuizId">Lägg till fråga</a>
            </div>
        </form>
    </div>
</div>

@if (Model.Questions != null)
{
    @foreach (var question in Model.Questions)
    {
        <p>
            
            <b>
                @question.Text <a asp-action="EditQuestion" asp-controller="Quiz" asp-route-id="@question.Id" asp-route-returnUrl="@routeUrl">Edit</a>
            </b>
        </p>
        <ul class="list-group">
            @foreach (var option in question.Options)
            {
                <li class="list-group-item">
                    <p>@option.Text</p>
                </li>            
            }
        </ul>
    }
}


<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
